package com.hoioy.diamond.webapi;import com.hoioy.diamond.dto.MenuDTO;import com.hoioy.diamond.common.dto.ResultDTO;import com.hoioy.diamond.service.MenuService;import com.fasterxml.jackson.core.JsonParseException;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.JsonMappingException;import com.fasterxml.jackson.databind.ObjectMapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@RestController@RequestMapping("sys")public class MenuAPIController {    private static final Logger log = LoggerFactory.getLogger(MenuAPIController.class);    @Autowired    private MenuService menuService;    @Autowired    private ObjectMapper objectMapper;    /**     * @return ResultDTO     * @throws @author chixue     * @Description: 菜单树     * @date 2017年5月9日     */    @PostMapping("/menu-tree")    public ResultDTO menuTree() {        ResultDTO result = new ResultDTO();        List<MenuDTO> menus = menuService.findRootTree();        result.setData(menus);        return result;    }    @GetMapping("/menu-all")    public Model menuAll(Model model) {        List<MenuDTO> list = menuService.findAllMenus();        model.addAttribute("allMenus", list);        return model;    }    ////@ApiOperation(value = "加载菜单树列表集合信息", notes = "sys/menu-list")    @PostMapping("/menu-list")    public String menuList(Model model, @RequestParam(value = "models", required = false) String models) {        Map searchParameters = new HashMap();        if (models != null && models.length() > 0) {            try {                searchParameters = objectMapper.readValue(models, new TypeReference<Map>() {                });            } catch (JsonParseException e) {                log.error("JsonParseException{}:", e.getMessage());                e.printStackTrace();            } catch (JsonMappingException e) {                log.error("JsonMappingException{}:", e.getMessage());            } catch (IOException e) {                log.error("IOException{}:", e.getMessage());                e.printStackTrace();            }        }        Map map = menuService.getPage(searchParameters, "salt");        // 菜单表格数据        model.addAttribute("list", map.get("menus"));        // 总条数        model.addAttribute("total", map.get("total"));        return "sys/menu-list";    }    ////@ApiOperation(value = "执行菜单保存", notes = "sys/menu-save")    @PostMapping("/menu-save")    public ResultDTO menuSave(Model model, @RequestParam("models") String models) {        ResultDTO result = new ResultDTO();        result.setCode(500);        MenuDTO dto = new MenuDTO();        if (models != null && models.length() > 0) {            try {                dto = objectMapper.readValue(models, new TypeReference<MenuDTO>() {                });            } catch (JsonParseException e) {                model.addAttribute("error", e.getMessage());                log.error("JsonParseException{}:", e.getMessage());            } catch (IOException e) {                model.addAttribute("error", e.getMessage());                log.error("IOException{}:", e.getMessage());            }        }        if (!model.containsAttribute("error")) {            try {                dto = menuService.saveMenu(dto, "salt");                result.setData(dto);                result.setCode(200);            } catch (Exception e) {                log.error("Exception{}:", e.getMessage());                model.addAttribute("error", e.getMessage());            }        }        return result;    }    //@ApiOperation(value = "执行菜单删除", notes = "sys/menu-delete")    @PostMapping("/menu-delete")    public Boolean menuDelete(Model model, @RequestParam("models") String models) {        List<MenuDTO> list = new ArrayList<MenuDTO>();        if (models != null && models.length() > 0) {            try {                list = objectMapper.readValue(models, new TypeReference<List<MenuDTO>>() {                });            } catch (JsonParseException e) {                log.error("JsonParseException{}:", e.getMessage());                e.printStackTrace();            } catch (IOException e) {                log.error("IOException{}:", e.getMessage());                e.printStackTrace();            }        }        try {            menuService.deleteMenu(list);            return true;        } catch (Exception e) {            log.error("Exception{}:", e.getMessage());            model.addAttribute("error", e.getMessage());            return false;        }    }}